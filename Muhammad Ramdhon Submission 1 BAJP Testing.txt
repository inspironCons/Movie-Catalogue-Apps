Muhammad Ramdhon ###################################################################### Dodon.Consult@gmail.com
########################################### Instrument Testing ###########################################
untuk kelancaran testing harap uncomment esprosso idling yang berada di
1.DetailMovieActivity.kt
2.DetailService.kt
3.TrendingService.kt
4.FavoriteRepository.kt


1)HomeFeatures
  1. displayMoviePlaylist
    deskripsi -> memuat movie playlist di recycleview
    
    a. klik tab pada posisi/ menu movie
    b. memastikan jumlah data movie berjumlah '20'
    c. memastikan nama film dan tahun benar
    d. memastikan movie score film benar
    e. memastikan movie original language film benar

  2. displayTvShowsPlaylist
    deskripsi -> memuat tv show playlist di recycleview
    
    a. klik tab pada posisi/ menu tv show
    b. memastikan jumlah data movie berjumlah '20'
    c. memastikan nama tv show dan tahun rilis perdana benar
    d. memastikan score tv show benar
    e. memastikan original language tv show benar

  3.navigateToDetailMovies
    deskripsi-> ketika klik item daftar film/tv show akan menuju halaman detail film

    a.klik item pertama pada kategori film
    b.memastikan layout yang ditampilkan halaman detail yang benar
    c. klik tombol kembali
    d. klik tab pada posisi/ menu tv show
    e.klik item pertama pada kategori tv show
    f.memastikan layout yang ditampilkan halaman detail yang benar

  4.showLoaderWhileFetchingTheListMovie
    deskripsi -> menampilkan progress bar pada saat mengambil data movie (jika gagal reviewer bisa test di fungsi ini saja pasti berhasil)

    1.mematikan/unregister idling resource agar progress bar movie list bisa terlihat
    2.memastikan id load_content_movies di menu movie tampil
    
  5.showLoaderWhileFetchingTheListTvShows
    deskripsi -> menampilkan progress bar pada saat mengambil data tv shows (jika gagal reviewer bisa test di fungsi ini saja pasti berhasil)
    
    1.mematikan/unregister idling resource agar progress bar tv show list bisa terlihat
    2.klik tab pada posisi/ menu tv show
    3.memastikan id load_content_tv_show di menu movie tampil
    
  6.hideLoaderWhileFetchingTheMovieListDone
    deskripsi -> menyembunyikan progress bar di menu film setelah data sudah ada
    1. memastikan id load_content_movies di menu movie sudah hilang

  7.hideLoaderWhileFetchingTheTvShowsListDone
    deskripsi -> menyembunyikan progress bar di menu tv shows setelah data sudah ada
    1.klik tab pada posisi/ menu tv show
    2. memastikan id load_content_tv_show di menu movie sudah hilang

  8.navigateToFavoriteList
    deskripsi -> memastikan layout benar ketika klik tombol favorit di kanan getDetailTvShowsFromApiServiceThenNetworkFails
    1. klik di tombol dengan id btn_favorite
    2. memastikan layout benar dengan id favorite_list_layout 

2)DetailsFeatures
   1.loadDetailsMovies
    deskripsi-> memuat detail dari item film/tv shows

        1.klik item pertama pada kategori film
        2.memastikan layout yang ditampilkan halaman detail yang benar
        3. membuat delay 2 detik agar poster tampil setelah di load ke imageview
        4.memastikan id movie_poster_detail dari imageview telah di masukan drawable 
        5.memastikan judul film sesuai dengan detail data dari item yang di testing
        6.memastikan tagline film sesuai dengan detail data dari item yang di testing
        7.memastikan tanggal release film sesuai dengan detail data dari item yang di testing
        8.memastikan user score film sesuai dengan detail data dari item yang di testing
        9.memastikan kategori film sesuai dengan detail data dari item yang di testing
        10.memastikan overview film sesuai dengan detail data dari item yang di testing  
        11.memastikan jumlah rumah film di film sesuai dengan detail data dari item yang di testing

    2.navigateToIntentWhileClickButtonWatch
      deskripsi -> klik tombol tonton untuk menonton di website layanan streaming

        1.klik item pertama pada kategori film
        2.mencoba melakukan intent ke browser dengan data url dari item yang di testing
        3 memastikan result intent berhasil dilakukan

    3.navigateBackButton
      deskripsi -> klik tombol kembali yang ada di layout
        1.klik item pertama pada kategori film
        2.klik tombol back dengan id btn_menus
        3.memastikan layout yang ditampilkan sesuai dengan halaman sebelum nya yaitu home page
    
    4.checkLabelProductionOrNetwork
      deskripsi -> mengecek apakah label dari id tv_lable_companies berjudul network untuk detail di tv shows atau production company untuk di movies
        1. klilk item pertama pada kategori film
        2. mengecek apakah label dengan id tv_lable_companies sama dengan string resource id companies yakni "Production Companies"
        3.klik tombol back dengan id btn_menus
        4.klik tab dengan judul tv shows
        5.klik item pertama pada kategori tv shows
        6. mengecek apakah label dengan id tv_lable_companies sama dengan string resource id network yakni "Network"
    
    5.testInsertDataToFavoriteDb
      deskripsi -> memastikan data movie telah berhasil dimasukan ke database local
        1.click item yang ada di recycleview posisi pertama
        2.insert data ke tabel favorite
        3.ambil semua data dari table favorit
        4.memastikan data yang di ambil dari table favorit mempunyai row data sama dengan data dummy

    6.testInsertDataToFavoriteDb
      deskripsi -> memastikan data movie telah berhasil dihapus dari database local
        1.click item yang ada di recycleview posisi pertama
        2.insert data ke tabel favorite
        3.delete data dari tabel favorite
        4.ambil semua data dari table favorit
        5.memastikan data yang di ambil dari table favorit tidak mempunyai row data sama dengan data dummy
    
    7.changeColorWhenClickBtnFavorite
      deskripsi -> memastikan warna berubah ketika tombol fab favorite di navigateToIntentWhileClickButtonWatch
        1.click item yang ada di recycleview posisi pertama
        2.check warna icon favorite berwarna putih
        3.click tombol fab favorite
        4.check warna icon favorite berwarna pink
3)FavoriteFeatures
    1.displayFavoriteMovies
      deskripsi->memastikan recycleview favorite menampilkan list item dengan type movie
      1.click list item di recycleview dengan id rv_movies di posisi pertama lalu click tombol favorite,kembali ke halaman utama dan klik tombol menu favorite(step ini untuk menambahkan data ke source local)
      2.klik tab layout dengan text Movies
      3. memastikan nama film dan tahun benar
      4. memastikan movie score film benar
      5. memastikan movie original language film benar
    
    2.displayFavoriteMovies
    deskripsi->memastikan recycleview favorite menampilkan list item dengan type tv shows
    1.click tab layout dengan text TV SHOWS lalu click list item di recycleview di posisi pertama lalu click tombol favorite,kembali ke halaman utama dan click tombol menu favorite(step ini untuk menambahkan data ke source local)
    2. click tab layout dengan text TV SHOW
    3. memastikan nama tv show dan tahun rilis perdana benar
    4. memastikan score tv show benar
    5. memastikan original language tv show benar

########################################### Instrument Testing ###########################################

########################################### Unit Testing ###########################################

1.MovieViewModelShould
  a.getMoviesListFromRepositoryThenSuccess(memuat daftar film dari repository dengan balikan berhasil)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan List dengan data class TrendingEntity
    - memanggil fungsi getMovieList di MoviesViewModel
    - memastikan fungsi getPlaylist() terpanggil hanya satu kali oleh variable fungsi getMovieList di MoviesViewModel
    - memastikan hasil balikan dari getPlaylist() sama dengan nilai dari list yang sudah di buat dengan mock

  b.getMoviesListFromRepositoryThenEmpty(memuat daftar film dari repository dengan balikan list kosong/ data tidak ada)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan List kosong / empty
    - memanggil fungsi getMovieList di MoviesViewModel
    - memastikan fungsi getPlaylist() terpanggil hanya satu kali oleh variable fungsi getMovieList di MoviesViewModel
    - memastikan hasil balikan dari getPlaylist() sama dengan nilai kosong

  c.getMoviesListFromRepositoryThenException(memuat daftar film dari repository dengan balikan error)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan error
    - memanggil fungsi getMovieList di MoviesViewModel
    - memastikan fungsi getPlaylist() terpanggil hanya satu kali oleh variable fungsi getMovieList di MoviesViewModel
    - memastikan hasil balikan dari getPlaylist() adalah error yakni RuntimeException dengan kata "Something Went Wrong"

  d.showLoaderWhenLoadMovieList(menampilkan loader ketika daftar film sedang dimuat/dipanggil)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan List dengan data class TrendingEntity
    - meng-capture nilai pertama dari variable loader yang ada di MoviesViewModel
    - memastikan bahwa nilai adalah 'true'

  e.hideLoaderWhenLoadMovieListIsDone(menyembunyikan loader ketika daftar film telah dimuat/dipanggil)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan List dengan data class TrendingEntity
    - meng-capture nilai terakhir dari variable loader yang ada di MoviesViewModel
    - memastikan bahwa nilai adalah 'false'

2.TvShowViewModelShould
  a.getMoviesListFromRepositoryThenSuccess(memuat daftar tv shows dari repository dengan balikan berhasil)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan List dengan data class TrendingEntity
    - memanggil fungsi getTvShowList di TvShowViewModel
    - memastikan fungsi getPlaylist() terpanggil hanya satu kali oleh variable fungsi getTvShowList di TvShowViewModel
    - memastikan hasil balikan dari getPlaylist() sama dengan nilai dari list yang sudah di buat dengan mock

  b.getMoviesListFromRepositoryThenEmpty(memuat daftar tv shows dari repository dengan balikan list kosong/ data tidak ada)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan List kosong / empty
    - memanggil fungsi getTvShowList di TvShowViewModel
    - memastikan fungsi getPlaylist() terpanggil hanya satu kali oleh variable fungsi getTvShowList di TvShowViewModel
    - memastikan hasil balikan dari getPlaylist() sama dengan nilai kosong

  c.getMoviesListFromRepositoryThenException(memuat daftar tv shows dari repository dengan balikan error)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan error
    - memanggil fungsi getTvShowList di TvShowViewModel
    - memastikan fungsi getPlaylist() terpanggil hanya satu kali oleh variable fungsi getTvShowList di TvShowViewModel
    - memastikan hasil balikan dari getPlaylist() adalah error yakni RuntimeException dengan kata "Something Went Wrong"

  d.showLoaderWhenLoadMovieList(menampilkan loader ketika daftar tv shows sedang dimuat/dipanggil)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan List dengan data class TrendingEntity
    - meng-capture nilai pertama dari variable loader yang ada di TvShowViewModel
    - memastikan bahwa nilai adalah 'true'

  e.hideLoaderWhenLoadMovieListIsDone(menyembunyikan loader ketika daftar tv shows telah dimuat/dipanggil)
    - membuat simulasi jika fungsi getPlaylist() di repo dipanggil maka akan mendapatkan List dengan data class TrendingEntity
    - meng-capture nilai terakhir dari variable loader yang ada di TvShowViewModel
    - memastikan bahwa nilai adalah 'false'

3.DetailMovieViewModelShould
  a.detailMoviesSuccessViewModel(memuat detail film dari repository dengan balikan berhasil)
    - membuat simulasi jika fungsi getDetailPlaylist() di repo dipanggil maka akan mendapatkan data dengan data DetailMovieEntity
    - memanggil fungsi detailMovie() di DetailMovieViewModel
    - memastikan fungsi getDetailPlaylist() terpanggil hanya satu kali oleh variable fungsi detailMovie() di DetailMovieViewModel
    - memastikan hasil balikan dari getDetailPlaylist() sama dengan detail yang sudah di buat dengan mock

  b.getDetailMovieFromRepositoryThenReturnException(memuat detail film dari repository dengan balikan error)
    - membuat simulasi jika fungsi getDetailPlaylist() di repo dipanggil maka akan mendapatkan error
    - memanggil fungsi detailMovie() di DetailMovieViewModel
    - memastikan fungsi getDetailPlaylist() terpanggil hanya satu kali oleh variable fungsi detailMovie() di DetailMovieViewModel
    - memastikan hasil balikan dari getDetailPlaylist() adalah error yakni RuntimeException dengan kata "Something Went Wrong on detail activity"

  c.getDetailMovieAfterSetValue (check data detail setelah set detail)
    - panggil fungsi setDetailMovie dengan parameter isian data detail dari mock dan type movie
    - memastikan variable movies di viewModel sama dengan yang kita buat dengan mock

  d.checkMovieWasInsertOnFavoriteTable (memastikan data detail movie telah di tambah di table favorite dengan balikan boolean)
    - membuat simulasi ketika fungsi isMoviesInTheFavoriteSegment di class FavoriteRepository dipanggil maka akan mendapatkan value flow bernilai true
    - mengisi nilai movieId di variabel movies dengan value id 634649
    - memanggil fungsi checkFavorite di class viewModel
    - memastikan fungsi isMoviesInTheFavoriteSegment di class FavoriteRepository terpanggil satu kali
    - memastikan nilai dari isMovieFavorite di viewmodel sesuai simulasi di step pertama yaitu true *(data movie ada di tabel favorite)
    
  e. checkMovieWasNotInsertOnFavoriteTable(memastikan data detail movie tidak ada di table favorite dengan balikan boolean)
    - membuat simulasi ketika fungsi isMoviesInTheFavoriteSegment di class FavoriteRepository dipanggil maka akan mendapatkan value flow bernilai false
    - mengisi nilai movieId di variabel movies dengan value id 634649
    - memanggil fungsi checkFavorite di class viewModel
    - memastikan fungsi isMoviesInTheFavoriteSegment di class FavoriteRepository terpanggil satu kali
    - memastikan nilai dari isMovieFavorite di viewmodel sesuai simulasi di step pertama yaitu false *(data movie tidak ada di tabel favorite)

  f. insertDetailMovieOnTableFavoriteWhenClickFabFavorite(memastikan data masuk di tabel favorite setelah click tombol favorite)
    - membuat simulasi ketika fungsi insertMoviesFavorite di class  FavoriteRepository dipanggil makan akan mendapatkan balikan dua String secara bertahap
    - memanggil setDetailMovie dengan isi param data detail yang di mock dan type movie
    - mengubah nilai variable isMovieFavorite di viewmodel dengan false
    - ambil nilai dari livedata saveFavorite hasil balikan insertMoviesFavorite di class FavoriteRepository
    - memastikan insertMoviesFavorite di class FavoriteRepository terpanggil sekali
    - memastikan balikan pertama yang diambil di fungsi saveFavorite sama dengan string ekspetasi yakni "loading"
    - memastikan balikan kedua yang diambil di fungsi saveFavorite sama dengan string ekspetasi yakni "Data Berhasil Ditambahkan"

  g. removeDetailMovieOnTableFavoriteWhenClickFabFavorite(memastikan data terhapus dari tabel favorite setelah click tombol favorite)
    - membuat simulasi ketika fungsi insertMoviesFavorite di class  FavoriteRepository dipanggil makan akan mendapatkan balikan dua String secara bertahap
    - memanggil setDetailMovie dengan isi param data detail yang di mock dan type movie
    - mengubah nilai variable isMovieFavorite di viewmodel dengan true
    - ambil nilai dari livedata saveFavorite hasil balikan deleteMovieFavorite di class FavoriteRepository
    - memastikan deleteMovieFavorite di class FavoriteRepository terpanggil sekali
    - memastikan balikan pertama yang diambil di fungsi saveFavorite sama dengan string ekspetasi yakni "loading"
    - memastikan balikan kedua yang diambil di fungsi saveFavorite sama dengan string ekspetasi yakni "Data Berhasil Dihapus"

  h. insertDetailMovieOnTableFavoriteWhenClickFabFavoriteThenReturnFailure(memastikan data gagal ditambah di tabel favorite setelah click tombol favorite)
    - membuat simulasi ketika fungsi insertMoviesFavorite di class  FavoriteRepository dipanggil makan akan mendapatkan balikan RuntimeException("Gagal ditambah")
    - memanggil setDetailMovie dengan isi param data detail yang di mock dan type movie
    - mengubah nilai variable isMovieFavorite di viewmodel dengan false
    - ambil nilai dari livedata saveFavorite hasil balikan insertMoviesFavorite di class FavoriteRepository
    - memastikan insertMoviesFavorite di class FavoriteRepository terpanggil sekali
    - memastikan balikan yang diambil di fungsi saveFavorite sama dengan ekspetasi error yakni RuntimeException("Gagal ditambah")

    g. removeDetailMovieOnTableFavoriteWhenClickFabFavoriteThenReturnFailure(memastikan data gagal terhapus dari tabel favorite setelah click tombol favorite)
    - membuat simulasi ketika fungsi insertMoviesFavorite di class  FavoriteRepository dipanggil makan akan mendapatkan balikan RuntimeException("Gagal DiDihapus")
    - memanggil setDetailMovie dengan isi param data detail yang di mock dan type movie
    - mengubah nilai variable isMovieFavorite di viewmodel dengan true
    - ambil nilai dari livedata saveFavorite hasil balikan deleteMovieFavorite di class FavoriteRepository
    - memastikan deleteMovieFavorite di class FavoriteRepository terpanggil sekali
    - memastikan balikan yang diambil di fungsi saveFavorite sama dengan ekspetasi error yakni RuntimeException("Gagal DiDihapus")
  
  i. getDetailMovieFromLocalSuccess (memastikan data balikan sesuai dengan data di db local)
    - membuat simulasi ketika fungsi getDetailFromLocal di class  MovieRepository dipanggil makan akan mendapatkan balikan flow data DetailMovieEntity yang di mock
    - memanggil detailMovie dengan params id, movie type, dan source local false
    - memastikan getDetailFromLocal dari class MovieRepository terpanggil satu kali
    - memastikan data balikan dari fungsi detailMovie sama dengan yang di buat dengan mock
  
  j. getDetailMovieFromLocalThenFailure (memastikan data balikan error/exception setelah mengambil dari tabel)
    - membuat simulasi ketika fungsi getDetailFromLocal di class  MovieRepository dipanggil makan akan mendapatkan balikan RuntimeException("Something Went Wrong on detail activity")
    - memanggil detailMovie dengan params id, movie type, dan source local false
    - memastikan getDetailFromLocal dari class MovieRepository terpanggil satu kali
    - memastikan data balikan dari fungsi detailMovie sama dengan balikan error RuntimeException("Something Went Wrong on detail activity")

4.MovieRepositoryShould
  a.getMoviesListFromApiService
    - membuat simulasi jika fungsi fetchApiMovieList di class TrendingService dipanggil mendapatkan response list sesuai data class ResultsMovieResponse
    - membuat simulasi jika class TrendingMovieMapper pada function invoke dipanggil maka mendapatkan balikan dengan list sesuai data class dari TrendingEntity
    - memanggil fungsi getMoviesList dari class MovieRepository
    - memastikan fungsi fetchApiMovieList dari class TrendingService terpanggil hanya satu kali
    -memastikan hasil balikan fungsi getMoviesList sama dengan list yang sudah di buat mock yakni List dari TrendingEntity

  b.getMoviesListFromApiServiceThenFailure
    - membuat simulasi jika fungsi fetchApiMovieList di class TrendingService dipanggil mendapatkan response gagal yakni exeption dengan pesan "Ops something went wrong"
    - memanggil fungsi getMoviesList dari class MovieRepository
    - memastikan fungsi fetchApiMovieList dari class TrendingService terpanggil hanya satu kali
    - memastikan hasil balikan fungsi getMoviesList error yakni dengan pesan "Ops something went wrong"

  c.checkingRawDataGetMovieListFromApiBeforeToMapperMovie
     - membuat simulasi jika fungsi fetchApiMovieList di class TrendingService dipanggil mendapatkan response list sesuai data class ResultsMovieResponse
     - membuat simulasi jika class TrendingMovieMapper pada function invoke dipanggil maka mendapatkan balikan dengan list sesuai data class dari TrendingEntity
     - memanggil fungsi getMoviesList dari class MovieRepository
     - memastikan fungsi invoke pada class MovieMapper terpanggil
  
  d.getTvShowsListFromApiService
    - membuat simulasi jika fungsi fetchApiTvList di class TrendingService dipanggil mendapatkan response list sesuai data class ResultsTvResponse
    - membuat simulasi jika class TrendingTVMapper pada function invoke dipanggil maka mendapatkan balikan dengan list sesuai data class dari TrendingEntity
    - memanggil fungsi getTvList dari class MovieRepository
    - memastikan fungsi fetchApiTvList dari class TrendingService terpanggil hanya satu kali
    -memastikan hasil balikan fungsi getTvList sama dengan list yang sudah di buat mock yakni List dari TrendingEntity
  
  e.getTvShowsListFromApiServiceThenFailure
     - membuat simulasi jika fungsi fetchApiTvList di class TrendingService dipanggil mendapatkan response gagal yakni exeption dengan pesan "Ops something went wrong"
    - memanggil fungsi getTvList dari class MovieRepository
    - memastikan fungsi fetchApiTvList dari class TrendingService terpanggil hanya satu kali
    - memastikan hasil balikan fungsi getTvList error yakni dengan pesan "Ops something went wrong"
  
  f.checkingRawDataGetTvListFromApiBeforeToMapperMovie
     - membuat simulasi jika fungsi fetchApiTvList di class TrendingService dipanggil mendapatkan response list sesuai data class ResultsTvResponse
     - membuat simulasi jika class TrendingTVMapper pada function invoke dipanggil maka mendapatkan balikan dengan list sesuai data class dari TrendingEntity
     - memanggil fungsi getTvList dari class MovieRepository
     - memastikan fungsi invoke pada class MovieMapper terpanggil

5.DetailMovieRepositoryShould
  a.getDetailMovieSuccessfulCase
    - membuat simulasi jika fungsi fetchDetailMovies pada class DetailService di panggil makan mendapatkan balikan  DetailMoviesResponse
    - memanggil fungsi getDetailMovies pada class DetailMovieRepository
    - memastikan fungsi fetchDetailMovies pada class DetailService terpanggil hanya satu kali
    - memastikan hasil balikan sama dengan objeck mock yakni object DetailMovieEntity
  b.getDetailMovieFailure
    - membuat simulasi jika fungsi fetchDetailMovies pada class DetailService di panggil makan mendapatkan balikan error exception dengan pesan "Something Wrong"
    - memanggil fungsi getDetailMovies pada class DetailMovieRepository
    - memastikan fungsi fetchDetailMovies pada class DetailService terpanggil hanya satu kali
    - memastikan hasil balikan sama dengan pesan error yakni "Something Wrong"
    c.checkingRawDataGetMovieBeforeToMappers
    - membuat simulasi jika fungsi fetchDetailMovies pada class DetailService di panggil makan mendapatkan balikan  DetailMoviesResponse
    - memanggil fungsi getDetailMovies pada class DetailMovieRepository
    - memastikan fungsi invoke dari class DetailMoviesMapper terpanggil hanya satu kali

  d.getDetailTvSuccessfulCase
    - membuat simulasi jika fungsi fetchDetailTV pada class DetailService di panggil makan mendapatkan balikan  DetailTvShowsResponse
    - memanggil fungsi getDetailTV pada class DetailMovieRepository
    - memastikan fungsi fetchDetailTV pada class DetailService terpanggil hanya satu kali
    - memastikan hasil balikan sama dengan objeck mock yakni object DetailMovieEntity
  e.checkingRawDataGetTvBeforeToMappers
    - membuat simulasi jika fungsi fetchDetailTV pada class DetailService di panggil makan mendapatkan balikan  DetailTvShowsResponse
    - memanggil fungsi getDetailTV pada class DetailMovieRepository
    - memastikan fungsi invoke dari class DetailMoviesMapper terpanggil hanya satu kali
  f.getDetailTvFailure
    - membuat simulasi jika fungsi fetchDetailTV pada class DetailService di panggil makan mendapatkan balikan error exception dengan pesan "Something Wrong"
   - memanggil fungsi getDetailTV pada class DetailMovieRepository
   - memastikan fungsi fetchDetailTV pada class DetailService terpanggil hanya satu kali
   - memastikan hasil balikan sama dengan pesan error yakni "Something Wrong"

  g.getDetailFromLocalReturnSuccess (mengambil data detail movie dari data local db dengan case normal)
   - membuat simulasi ketika fungsi getDetailById di interface class FavoriteDao dengan balikan DetailMovieEntity
   - memanggil fungsi getDetailFromLocal dari class DetailMovieRepository
   - memastikan fungsi getDetailById di interface class FavoriteDao terpanggil sekali
   - memastikan hasil balikan dari getDetailFromLocal sama dengan data DetailMovieEntity

  h.getDetailFromLocalReturnFailure (mengambil data detail movie dari data local db dengan case normal)
   - membuat simulasi ketika fungsi getDetailById di interface class FavoriteDao dengan balikan RuntimeException("Something Wrong")
   - memanggil fungsi getDetailFromLocal dari class DetailMovieRepository
   - memastikan fungsi getDetailById di interface class FavoriteDao terpanggil sekali
   - memastikan hasil balikan error dari getDetailFromLocal sama dengan data RuntimeException("Something Wrong")

6.TrendingServiceShould
  a.getMovieFromApiThenSuccess 
    - membuat simulasi jika fungsi getTrendingMovieOnThisWeek pada interface TrendingApi mendapatkan balikan dengan nilai TrendingMovieResponse
    - memanggil fungsi fetchApiMovieList pada interface interface TrendingApi
    - memastikan fungsi fetchApiMovieList terpanggil hanya satu kali
    - memastikan nilai balikan dari fungsi fetchApiMovieList adalah sama dengan yang dibuat dengan mock yakni dari object data class TrendingMovieResponse
  b.getMovieFromApiThenNetworkFail
    - membuat simulasi jika fungsi getTrendingMovieOnThisWeek pada interface TrendingApi mendapatkan balikan throw dengan pesan error "Something went wrong"
    - memanggil fungsi fetchApiMovieList pada interface interface TrendingApi
    - memastikan fungsi fetchApiMovieList terpanggil hanya satu kali
    - memastikan nilai balikan dari fungsi fetchApiMovieList adalah sama yakni pesan error "Something went wrong"
  c.getTvShowsFromApiThenSuccess
   - membuat simulasi jika fungsi getTrendingTvShowsOnThisWeek pada interface TrendingApi mendapatkan balikan dengan nilai TrendingTvResponse
    - memanggil fungsi fetchApiTvList pada interface interface TrendingApi
    - memastikan fungsi fetchApiTvList terpanggil hanya satu kali
    - memastikan nilai balikan dari fungsi fetchApiTvList adalah sama dengan yang dibuat dengan mock yakni dari object data class TrendingTvResponse
  d.getTvShowsFromApiThenNetworkFail
  - membuat simulasi jika fungsi getTrendingTvShowsOnThisWeek pada interface TrendingApi mendapatkan balikan throw dengan pesan error "Something went wrong"
    - memanggil fungsi fetchApiTvList pada interface interface TrendingApi
    - memastikan fungsi fetchApiTvList terpanggil hanya satu kali
    - memastikan nilai balikan dari fungsi fetchApiTvList adalah sama yakni pesan error "Something went wrong"

7.DetailServiceShould
  a.getDetailMoviesFromApiService
   - membuat simulasi jika fungsi getDetailMovie pada interface DetailMoviesApi mendapatkan balikan dengan nilai DetailMoviesResponse
   - memanggil fungsi fetchDetailMovies pada class DetailService
   - memastikan fungsi getDetailMovie pada interface DetailMoviesApi terpanggil hanya satu kali
   -memastikan balikan nilai dari fungsi fetchDetailMovies sama dengan mock yakni dari object data class DetailMoviesResponse
  b.getDetailMoviesFromApiServiceThenNetworkFails
    - membuat simulasi jika fungsi getDetailMovie pada interface DetailMoviesApi mendapatkan balikan throw dengan pesan error "Something went wrong"
    - memanggil fungsi fetchDetailMovies pada class DetailService
    - memastikan fungsi getDetailMovie pada interface DetailMoviesApi terpanggil hanya satu kali
    - memastikan balikan nilai dari fungsi fetchDetailMovies adalah sama yakni pesan error "Something went wrong"
  c.getDetailTvShowsFromApiService
   - membuat simulasi jika fungsi getDetailTv pada interface DetailMoviesApi mendapatkan balikan dengan nilai DetailTvShowsResponse
   - memanggil fungsi fetchDetailTV pada class DetailService
   - memastikan fungsi getDetailTv pada interface DetailMoviesApi terpanggil hanya satu kali
   -memastikan balikan nilai dari fungsi fetchDetailTV sama dengan mock yakni dari object data class DetailTvShowsResponse
  d.getDetailTvShowsFromApiServiceThenNetworkFails
    - membuat simulasi jika fungsi getDetailTv pada interface DetailMoviesApi mendapatkan balikan throw dengan pesan error "Something went wrong"
    - memanggil fungsi fetchDetailTV pada class DetailService
    - memastikan fungsi getDetailTv pada interface DetailMoviesApi terpanggil hanya satu kali
    - memastikan balikan nilai dari fungsi fetchDetailTV adalah sama yakni pesan error "Something went wrong"

8.FavoriteViewModelsShould
  a.getListMovie (memastikan data balikan PagingSource yang di masukan ke dalam adapter sama dengan ada di mock)
    - membuat simulasi fungsi getFavoriteMovieByType di class FavoriteRepository mendapatkan balikan PagingSource<Int,DetailMovieEntity>
    - membuat object variable yang memuat helper class untuk mapping PagingData ke adapter recycleview
    - mengambil data dari variable getListMovie di class viewmodel lalu di submit ke object helper yang telah dibuat
    - memastikan fungsi getFavoriteMovieByType dari class FavoriteRepository telah di panggil satu kali
    - memastikan data snapshot dari object helper yang telah dibuat dengan List<DetailMovieEntity>

9.FavoriteMovieRepositoryShould
  a.getFavoriteMovieByType (mengambil list movie dari db local)
    - membuat simulai ketika fungsi getMovies dari class Interface FavoriteDao mendapatkan balikan PagingSource<Int,DetailMovieEntity>
    - memanggil fungsi getFavoriteMovieByType dengan params Movie Types
    - memastikan fungsi getMovies di class interface FavoriteDao terpanggil satu kali
    - memastikan hasil dari getFavoriteMovieByType sama dengan ekspetasi yakni PagingSource<Int,DetailMovieEntity>

  b.checkingMoviesNotAvailableInLocal (mengecek apakah data detail movie belum ada di local)
    - membuat simulasi fungsi countMoviesById di class interface FavoriteDao dengan balikan 0
    - memanggil fungsi isMoviesInTheFavoriteSegment dengan params idMovie di class FavoriteMovieRepository
    - memastikan countMoviesById di class interface FavoriteDao terpanggil sekali
    - memastikan hasil dari fungsi countMoviesById adalah false

  c.checkingMoviesAvailableInLocal (mengecek apakah data detail movie sudah ada di local)
    - membuat simulasi fungsi countMoviesById di class interface FavoriteDao dengan balikan 1
    - memanggil fungsi isMoviesInTheFavoriteSegment dengan params idMovie di class FavoriteMovieRepository
    - memastikan countMoviesById di class interface FavoriteDao terpanggil sekali
    - memastikan hasil dari fungsi countMoviesById adalah true

   d.checkingMoviesAreAvailableInLocalButErrorRuntime (mengecek apakah data detail movie sudah ada di local tapi balikan error)
    - membuat simulasi fungsi countMoviesById di class interface FavoriteDao dengan balikan RuntimeException("Something Wrong")
    - memanggil fungsi isMoviesInTheFavoriteSegment dengan params idMovie di class FavoriteMovieRepository
    - memastikan countMoviesById di class interface FavoriteDao terpanggil sekali
    - memastikan hasil dari fungsi countMoviesById error dengan exception RuntimeException("Something Wrong") 

  e.checkingInsertMovie (mengecek apakah insert data detail ke local db berhasil)
    - memanggil fungsi insertMoviesFavorite di class FavoriteMovieRepository
    - memastikan fungsi insert di class interface FavoriteDao terpanggil satu kali
    
########################################### Unit Testing ###########################################